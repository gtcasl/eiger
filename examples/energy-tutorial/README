INTRODUCTION
============
This folder contains a demonstration of Eiger's energy modeling capabilities
with the HPCCG mini app. The application source code has already been marked up
with the correct instrumentation calls. This document walks through a simple
example of running the app, collecting the instrumentation, generating the
models, and running those models within SST/macro.

For questions and comments, please contact Eric Anger <eanger@gatech.edu>.

REQUIREMENTS
============
This document assumes that Eiger has been setup and installed on the system,
including access to a database. Please see the documentation for the Eiger
project for mor information:

    https://github.com/gtcasl/eiger

The energy modeling requires PAPI version 5.3 or later and an Intel processor
supporting RAPL (Sandybridge or newer). The MSR kernel module is required, as
are the correct capabilities (requiring root). For more information on getting
set up with PAPI and RAPL, please see:

    http://icl.cs.utk.edu/projects/papi/wiki/PAPITopics:RAPL_Access

BUILDING
========
The provided Makefile is multipurpose: it's used to make several different
versions of the HPCCG app. There are several convenience rules to make the
different versions:

    make 
        Builds the native version of the app.
    make sstmac
        Builds a version to run in SST/macro but retaining all original
        computation. Requires sstmacro-config.
    make instrument
        Builds the native version with lwperf instrumentation added, dumping to
        a file to be replayed into the Eiger database. Requires PAPI. Requires
        the LWP_DBNAME environment variable to be set to the name of the
        database to dump instrumented data into.
    make eiger
        Builds a version to run in SST/macro that uses Eiger models created
        from data collected using the lwperf instrumented version. This will
        prompt for superuser rights to set the executable capabilities (for
        accessing the RAPL counters).

Each of these versions can be cleaned up by issuing the same command with
'clean' prefixed to the target. For example, 'make sstmac' can be cleaned by
issuing 'make cleansstmac'.

INSTRUMENTATION
===============
Collecting instrumentation data to generate energy models in Eiger is no
different than with time; the application source code must be annotated with
lwperf macros indicating regions of interest, as well as any source-level
parameters used to predict performance. Consider the ddot() function in
HPCCG.cpp:

int
ddot(const int n, const double * const x, const double * const y,
     double * const result, double & time_allreduce){
  double local_result = 0.0;

  // lwperf call added
  PERFLOG(ddot,IN(n));

  if (y == x)
    for (int i = 0; i < n; i++)
      local_result += x[i] * x[i];
  else
    for (int i = 0; i < n; i++)
      local_result += x[i] * y[i];

  // lwperf call added
  PERFSTOP(ddot,IN(n));

  // ...
  // snipped
  // ...

  return 0;
}

The PERFLOG and PERFSTOP macros surround the computation loop in the function.
We give the region a name 'ddot' and a single source-level parameter 'n', the
size of the arrays. All the energy-specific measurement with PAPI is handled
behind the scenes by lwperf.

All locations where lwperf calls have been added are annotated with "lwperf
call added" to make them easier to find.

MODELING
========
Running the instrumented version of the executable will send the collected data
to the Eiger database, which can then be used to create Eiger models for later
simulation. lwperf currently uses PAPI's event names as the parameter names
which get sent to Eiger. For example, the RAPL event for package energy is
named "rapl:::PACKAGE_ENERGY:PACKAGE0".

An energy model for the ddot example above can be created with the following
Eiger.py command:

    Eiger.py --db <LWP_DBNAME> -t ddot --performance-metric \
             "rapl::PACKAGE_ENERGY:PACKAGE0" -o ddot.model

This will train a model and save it to the file 'ddot.model' in the current
directory.

SIMULATION
==========
Simulation using Eiger energy models is the same as with time, except the
models generated represent elapsed energy. When the simulation gets to a
computation region, SST/macro will call into the model to estimate the energy.
This then gets communicated to the SST/macro runtime. Currently SST/macro does
not support energy as a first-class citizen, so the internal system clock is
incremented with energy (since it believes it is modeling time). Future work
includes separating out the APIs so that SST/macro can make a more informed
decision about what to do with the evaluated model.
